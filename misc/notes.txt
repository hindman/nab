--------
Usage overview
--------

INPUT | nab [OPTS] STEP... [-- PATH...]

Where:

    INPUT = input data via stdin (INPUT or PATHS + MARKER + INPUT)

    OPTS =
           --help
           --step-mode short,long,name   (comma-delim; default: all)
           --paths PATH...
           --paths-stdin MARKER          (PATHS also via stdin until MARKER)

    STEP = --step NM SOPTS
           -s     NM SOPTS
           .NM       SOPTS


--------
Terminology
--------

Terminology:

    - Run: end-to-end execution of nab.
    - Phase: the major subsections of a run.
    - Step: user-supplied parts of the processing pipeline.

Phase names considered:

    Current    | Explicit       | Alt1     | Alt2       | Alt2       | .
    -------------------------------------------------------------------------
    begin      | begin          | begin    | configure  | begin      | .
    discover   | discover_files | discover | discover   | discover   | .
    file_begin | begin_file     | prepare  | initialize | initialize | .
    run        | process_value  | process  | process    | process    | .
    file_end   | end_file       | wrapup   | finalize   | finalize   | .
    end        | end            | end      | end        | end        | .

Decision:

    begin      | Steps configure themselves.
    discover   | Steps can be used for file discovery.
    initialize | Steps can initialize at the start of a file.
    process    | Process one value.
    finalize   | The end-of-file extension of the process-phase.
    end        | Emit final outputs.

--------
Support paths via several mechanisms
--------

    - ARGS + paths-option
    - The --paths option
    - STDIN (if paths-stdin defined)

    - Via a file: one path per line.
    - Via clipboard.
    - Via directory walk.
    - Via glob.

    - Or any combination.

    - Other:

        - sort-files option

        - File inclusion/exclusion:
            --[no]follow                  Follow symlinks.  Default is off.
            --type=X                      Include only X files, where X is a recognized filetype.

--------
Better help
--------

    - Add step option-help text.
    - Show step docs.
    - Show Step.DESC.
    - Support Step.GROUPS.

--------
NabRgx
--------

Perl:

    return $1 if /.../;

Python:

    rgx = re.compile(...)
    m = rgx.search(TXT)
    if m:
        return m.group(1)

NabRgx:

    - A wrapper around both the regex and the match object.

    rgx = NabRgx(...)
    return iff(rgx.search(TXT), rgx[1], None)

--------
Steps that collect values
--------

    - Example use cases:
        - Assemble parapraphs of data.
        - Assemble a household (eg IPUMS).

    - Treat the file-end-phase as an extension of the run-phase:

        - If a step defines file_end(), we call it.

        - If data is returned, it flows through the run-phase of all downstream
          steps.

        - Expose to steps information about the N of files, along with an
          is_last_file() helper. This is needed in case the step requires
          special logic at the very end of the run-phase.

--------
Steps that emit multiple values
--------

    - Create a ValIter() class.

    - When a step returns a ValIter(), the main loop will forward each value
      from that iterable to all downstream steps.

    - Implementation notes:

        - Use a flat while-True loop to handle iteration over both lines
          and run-phases.

        - Use a stack (or Q is nab ever supports BFS).

        - The values in the stack: (VAL, STEP_INDEX).

        - Manually advance to the next VAL or STEP, based on conditions.

--------
Support BFS processing
--------

    - Use cases: wny time file-wide holistic knowledge (presumably collected by
      early steps and stored in self.context) is needed by subsequent steps.

    - A default line-processing program is DFS:
        - Input a LINE.
        - Run it through all STEPS.
        - Go to the next LINE.

    - What BFS would look like:
        - Process all LINEs through 1st STEP.
        - For non-None vals, process through 2nd STEP.
        - Etc.

    - Assumption: must hold all data in memory.

--------
Add Step.context
--------

    - A dict-with-attr-support that all steps can read/write.
    - Example use case: a Rectype step that determines record type (eg H or P)
      and sets self.context accordingly.

--------
Support parallel file processing
--------

    - Current model: process one FILE, LINE by LINE.

    - Parallel model: process N FILEs, LINE-TUPLE by LINE-TUPLE.

    - Use cases:
        - File comparison work.
        - MPC examples:
            column.cmp.pl
            column.merge.pl
            rectangularize.pl
            var.diff.pl

--------
Support .nabrc file
--------

    --nabrc=filename              Specify an ackrc file to use
    --[no]nabrc                   Ignore .nabrc.
    --create-nabrc                Outputs a default nabrc to standard output.

--------
DataDict() helper class for positional data processing
--------

    - DataDict() helper class:
        - Takes a file path defining the var names and locations.
        - Either fixed-with (start, width) or delimited (column number).

    - Then expose that structure on self so Step code can use it.

    - Add support for that convenience to relevant Step classes.

    - See MPC scripts for use cases.

--------
Dryrun support
--------

Example use cases:

    - When writing to files.

        - Take an OUTPUT_DIR.

        - Write output files to that directory tree (creating any
          subdirectories, as needed).

    - When performing any file-system operations: rm, touch, etc.

--------
Unicode handling
--------

Line input: decode, if needed:
    - ln.val should always be str (Py3) or unicde (Py2).
    - Behavior varies between opened files and stdin.
    - Might also vary between Py2 and Py3.

Output: encode, if needed.

Str(): convert to six.text_type, not Py2-str.

Provide user an option to control encodings.

--------
Add/improve Steps
--------

Groups:

    Print
    Strip
    Split
    Index
    Select
    Aggregate
    Convert
    Search
    Run
    String
    Sequence
    Dict
    FileOp
    Path
    Math
    GetSet
    Group
    FileConv

Steps:

    Group     | Step          | Status  | Notes
    -------------------------------------------
    Print     | .             | .       | .
    .         | Pr            | .       | .
    .         | Wr            | .       | .
    Strip     | .             | .       | .
    .         | Chomp         | .       | .
    .         | Strip         | .       | .
    .         | LStrip        | .       | .
    .         | RStrip        | .       | .
    Split     | .             | .       | .
    .         | Split         | enhance | Support S.split(SEP, MAX).
    .         | RSplit        | add     | .
    .         | Join          | .       | .
    Index     | .             | .       | .
    .         | Index         | enhance | See notes.
    .         | RIndex        | enhance | See notes.
    .         | Slice         | .       | .
    .         | Cols          | add     | Grab cols from record.
    Select    | .             | .       | .
    .         | Head          | .       | .
    .         | Tail          | add     | .
    .         | Lines         | add     | See notes.
    .         | Skip          | .       | .
    .         | Limit         | .       | Emit no more than N values.
    .         | FlipFlop      | enhance | See notes.
    .         | Grep          | enhance | See notes.
    .         | Uniq          | add     | Main a set. Emit only unseen values.
    .         | Sample        | add     | See MPC draw.sample.basic.pl.
    Aggregate | .             | .       | .
    .         | Sum           | .       | .
    .         | Min           | add     | .
    .         | Max           | add     | .
    .         | ValCount      | add     | See notes.
    .         | Wc            | add     | .
    .         | Freq          | enhance | See notes.
    .         | Cross         | add     | See notes.
    Convert   | .             | .       | .
    .         | Str           | .       | .
    .         | Int           | .       | .
    .         | Float         | .       | .
    .         | List          | add     | .
    .         | Dict          | add     | .
    .         | Set           | add     | .
    .         | Tuple         | add     | .
    .         | Bytes         | add     | .
    .         | Bool          | add     | .
    Search    | .             | .       | .
    .         | Sub           | .       | .
    .         | Search        | .       | .
    .         | FindAll       | .       | .
    Run       | .             | .       | .
    .         | Run           | .       | .
    .         | Eval          | add     | Emit eval(ln.val)
    JSON      | .             | .       | .
    .         | JsonD         | .       | .
    .         | JsonL         | add     | .
    String    | .             | .       | .
    .         | Format        | add     | Return FMT.format(*ln.val OR **ln.val).
    .         | Upper         | add     | .
    .         | Lower         | add     | .
    .         | Replace       | add     | .
    .         | Nl            | .       | .
    .         | Prefix        | .       | .
    .         | Suffix        | .       | .
    .         | Pad           | add     | Left, right, both.
    .         | Center        | add     | .
    .         | Wrap          | add     | .
    .         | FileName      | add     | File name prefix (like grep).
    .         | LineNum       | add     | Similar to FileName.
    Sequence  | .             | .       | See notes.
    .         | Append        | add     | .
    .         | Extend        | add     | .
    .         | Insert        | add     | .
    .         | Pop           | add     | .
    .         | Remove        | add     | .
    .         | Reverse       | add     | .
    .         | Sort          | add     | .
    .         | Count         | add     | See notes.
    .         | Len           | add     | .
    .         | Zip           | add     | .
    Dict      | .             | .       | .
    .         | Keys          | add     | .
    .         | Values        | add     | .
    .         | Items         | add     | .
    .         | Update        | add     | Support JSON input.
    .         | Dive          | add     | Dict diving (also sequence).
    FileOp    | .             | .       | Typically returns ln.val.
    .         | Touch         | add     | .
    .         | Write         | add     | Takes (VAL, PATH).
    .         | MkDir         | add     | .
    .         | RmDir         | add     | .
    .         | Rm            | add     | .
    .         | Mv            | add     | Takes (OLD, NEW).
    Path      | .             | .       | .
    .         | DirPath       | add     | .
    .         | FileName      | add     | .
    .         | BaseName      | add     | .
    .         | Extension     | add     | .
    Math      | .             | .       | .
    .         | Abs           | add     | .
    .         | Round         | add     | .
    .         | DivMod        | add     | .
    .         | Pow           | add     | .
    GetSet    | .             | .       | .
    .         | GetAttr       | add     | .
    .         | SetAttr       | add     | .
    .         | HasAttr       | add     | .
    .         | GetItem       | add     | .
    .         | SetItem       | add     | .
    .         | HasItem       | add     | .
    Group     | .             | .       | .
    .         | Para          | add     | .
    FileConv  | .             | .       | .
    .         | ConvertRecord | add     | See notes.

Notes:

    Sequence:
        - Supported types: list, tuple, sometimes str, sometimes dict.
        - Functions take VAL: support common conversion (eg int) and JSON input.
        - Return mutated sequence: eg Remove, Sort.
        - Remove: support --all.
        - Sort: support --key option that takes code.

Step details:

    Pr:
        - Groups: Print
        - Usage:
            .pr
            .pr --sep X --end X
        - Notes: .
            - The --file option not needed (handled by discover phase).
            - And --flush seems not applicable.

    Wr:
        - Groups: Print
        - Usage:
            .wr
        - Notes:
            - Inherit from Pr and just change the default --end option.

    Chomp:
        - Groups: Strip, String
        - Usage:
            .chomp

    Strip:
        - Groups: Strip, String
        - Usage:
            .strip
            .strip X
            .strip X --use-rgx
        - Notes:
            - Default: behave like str.strip().
            - Also support regex-based stripping.

    LStrip:
        - Notes: see Strip.

    RStrip:
        - Notes: see Strip.

    Split:
        - Groups: Split.
        - Usage:
            .split
            .split SEP
            .split SEP --max-split N
        - Notes:

    RSplit:
        - Notes: see Split.

    Join:
        - Groups: Split.
        - Usage:
            .join [STR]
        - Notes:
            - Returns STR.join(ln.val)

    Index:
        - Notes: synonym for GetItem.

    RIndex:
        - Notes: drop; not needed.

    Range:
        - Notes: rename to Slice.

    Slice:
        - Groups: Index.
        - Usage:
            .slice STOP
            .slice START STOP
            .slice START STOP STEP
            .slice [--start X] [--stop Y] [--step Z]
        - Notes:
            - return ln.val[SLICE]

    Cols:
        - Groups: Index.
        - Usage:
            .cols ...
            .cols N
            .cols START:STOP
            .cols FIRST..LAST
            .cols FIRST,N
        - Notes:
            - Very similar to Lines, but without STEP.
            - The step takes 1+ arguments.
            - The supported argument types can be mixed and matched.
            - Emits an N-tuple, where N equals the number of arguments to the step.
            - Column numbering starts at 1.

    Head:
        - Groups: Select.
        - Usage:
            .head [N]
        - Notes:
            - A Head step means emit the first N vals seen by that step.
            - Does not mean: emit only vals from the first N lines of the file.
            - Use Lines for the latter use case.

    Tail:
        - Groups: Select.
        - Usage:
            .tail [N]
        - Notes:
            - Hold the last N vals in memory.
            - Emit them during finalize-phase.

    Lines:
        - Groups: Select.
        - Usage:
            .lines N
            .lines START:STOP:STEP
            .lines FIRST..LAST
            .lines FIRST,N
        - Notes:
            - The step takes 1+ arguments.
            - The supported argument types can be mixed and matched.
            - Line numbering starts at 1.

    Skip:
        - Groups: Select.
        - Usage:
            .skip N
        - Notes:
            - Like Head: skips the first N vals its sees.

    Limit:
        - Groups: Select.
        - Usage:
            .limit N
        - Notes:
            - Emit no more than N vals.

    FlipFlop:
        - Groups: Select.
        - Usage:
            .flipflop START STOP [--line-numbers LN] [--inclusive IN]
        - Notes:
            - By default, START and STOP triggers are regex-based.
            - LN for line-number triggers: none (default), start, stop, both.
            - IN controls inclusivity: none, start (default), stop, both (Perl default).
            - Both triggers can fire on the same line.

    Grep:
        - Groups: Select.
        - Usage:
            .grep RGX... [OPTIONS]
        - Notes:
            - Takes 1+ regexes.
            - Emits vals satisfing the regexes-plus-options.
            - See grep/ack for conventional single-letter options.
            - Options:
                --all               Emit only if all REGEXS match (default: any).
                --invert-match      Emit vals that do NOT match.
                --ignore-case       Ignore case.
                --literal           Quote all metacharacters; PATTERN is literal.
                --word-regex        Force PATTERN to match only whole words.
                --line-regex        Force PATTERN to match only whole lines.
                --before-context N  Also emit N lines before the match.
                --after-context N   Same idea.
                --context N         Same idea.
                --lines N           Emit no more than N vals from each file.
                --max-count N       Emit no more than N vals overall.
                --positions         Emit (line, position).

    Uniq:
        - Groups: Select.
        - Usage:
            .uniq [--scope S] [--repeated] [--ignore-case]
        - Notes:
            - By default, Uniq evaluates adjacent values in the stream and
              emits only one of any adjacent set of duplicates.
            - The --scope option (file or all) widens the uniqueness check
              to a whole file or the entire stream. This option requires
              holding a set of vals seen.
            - The --repeated option inverts the logic: emits a val only
              if is a duplicate (and only once).

    Sample: TODO
        - Groups: Select.
        - Usage:
            .sample ...
        - Notes:

    Sum:
        - Groups: Aggregate.
        - Usage:
            .sum
        - Notes:
            - Prints TOTAL during end-phase.
            - Supports any data types that handles += operator.

    Min:
        - Groups: Aggregate.
        - Usage:
            .min ...
        - Notes:
            - Prints MIN during end-phase.
            - Supports any data types that handles > operator.

    Max:
        - Notes: see Min.

    ValCount:
        - Groups: Aggregate.
        - Usage:
            .valcount
        - Notes:
            - Counts the N of values it sees.
            - Prints N during end-phase.

    Wc:
        - Groups: Aggregate.
        - Usage:
            .wc
            .wc lines|words|chars|bytes...
            .wc [--lines] [--words] [--chars] [--bytes]
        - Notes:
            - Counts the vals it sees.
            - Prints totals during end-phase.
            - Default output (LINES, WORDS, CHARS, BYTES).
            - Or user can request specific tallies via options or args.

    Freq:
        - Groups: Aggregate.
        - Usage:
            .freq [--mode MODE] [--format FMT] [--sort SORT] [--weighted]
        - Notes:
            - Behavior:
                - Collect frequency distribution(s) from the vals it sees.
                - Prints during the end-phase.
            - Frequency modes:
                - MODE: regular|multi|cross (default: regular).
                - Regular: expects a single value; one distribution.
                - Multi: expects a tuple; a distribution per position in the sequence.
                - Cross: expects a tuple; one distribution, using the tuple as the key.
            - Weighted frequencies:
                - Expects a (VAL, WEIGHT) tuple.
                - VAL varies by MODE, as noted above.
                - WEIGHT: weight values, with a parallel structure to VAL.
            - Output control:
                - FMT: fmt|json|yaml|csv|table.
                - Defaults:
                    - FMT of '{key} : {n}' (for basic frequencies).
                    - FMT of 'table' (for crosstabs).
                - Give more thought to how user can control tabular formats (TODO).
                - Sorting:
                    - By keys or vals, by ascending or descending.
                    - SORT: kasc|kdesc|vasc|vdesc (default: kasc).

    Cross:
        - Not needed; use Freq instead.

    Str:
        - Groups: Convert.
        - Usage:
            .str
        - Notes:
            - Returns str(ln.val).
            - Based on Python 3, where str means unicode-text and bytes means binary.

    Bytes:
        - Same form as Str.

    Int:
        - Same form as Str.
        - Also supports a --base N option.

    Float:
        - Same form as Str.

    List:
        - Same form as Str.
        - Also suppose --wrap option: returns [ln.val].

    Tuple:
        - Same form/options as List.

    Set:
        - Same form/options as List.

    Dict:
        - Same form as Str.

    Bool:
        - Same form as Str.

    __HERE__ : also see TODO

    Sub:
        - Groups: Search.
        - Usage:
            .sub ...
        - Notes:

    Search:
        - Groups: Search.
        - Usage:
            .search ...
        - Notes:

    FindAll:
        - Groups: Search.
        - Usage:
            .findall ...
        - Notes:

    Run:
        - Groups: ...
        - Usage:
            .run ...
        - Notes:
            - Support other phases and allow CODE for process-phase to be optional.
                --step run [CODE]
                       [--discover CODE]
                       [--initialize CODE]
                       [--process CODE]
                       [--finalize CODE]
                       [--end CODE]
                       [-i N]
            - Confirm can support indented input.
            - Confirm multiple `-s run` can be used in the same execution.

    Eval:
        - Groups: ...
        - Usage:
            .eval ...
        - Notes:

    JsonD:
        - Groups: ...
        - Usage:
            .jsond ...
        - Notes:

    JsonL:
        - Groups: ...
        - Usage:
            .jsonl ...
        - Notes:

    Format:
        - Groups: ...
        - Usage:
            .format ...
        - Notes:

    Upper:
        - Groups: ...
        - Usage:
            .upper ...
        - Notes:

    Lower:
        - Groups: ...
        - Usage:
            .lower ...
        - Notes:

    Replace:
        - Groups: ...
        - Usage:
            .replace ...
        - Notes:

    Nl:
        - Groups: ...
        - Usage:
            .nl ...
        - Notes:

    Prefix:
        - Groups: ...
        - Usage:
            .prefix ...
        - Notes:

    Suffix:
        - Groups: ...
        - Usage:
            .suffix ...
        - Notes:

    Pad:
        - Groups: ...
        - Usage:
            .pad ...
        - Notes:

    Center:
        - Groups: ...
        - Usage:
            .center ...
        - Notes:

    Wrap:
        - Groups: ...
        - Usage:
            .wrap ...
        - Notes:

    FileName:
        - Groups: ...
        - Usage:
            .filename ...
        - Notes:

    LineNum:
        - Groups: ...
        - Usage:
            .linenum ...
        - Notes:

    Append:
        - Groups: ...
        - Usage:
            .append ...
        - Notes:

    Extend:
        - Groups: ...
        - Usage:
            .extend ...
        - Notes:

    Insert:
        - Groups: ...
        - Usage:
            .insert ...
        - Notes:

    Pop:
        - Groups: ...
        - Usage:
            .pop ...
        - Notes:

    Remove:
        - Groups: ...
        - Usage:
            .remove ...
        - Notes:

    Reverse:
        - Groups: ...
        - Usage:
            .reverse ...
        - Notes:

    Sort:
        - Groups: ...
        - Usage:
            .sort ...
        - Notes:

    Count:
        - Groups: ...
        - Usage:
            .count ...
        - Notes:

    Len:
        - Groups: ...
        - Usage:
            .len ...
        - Notes:

    Zip:
        - Groups: ...
        - Usage:
            .zip ...
        - Notes:

    Keys:
        - Groups: ...
        - Usage:
            .keys ...
        - Notes:

    Values:
        - Groups: ...
        - Usage:
            .values ...
        - Notes:

    Items:
        - Groups: ...
        - Usage:
            .items ...
        - Notes:

    Update:
        - Groups: ...
        - Usage:
            .update ...
        - Notes:

    Dive:
        - Groups: ...
        - Usage:
            .dive ...
        - Notes:

    Touch:
        - Groups: ...
        - Usage:
            .touch ...
        - Notes:

    Write:
        - Groups: ...
        - Usage:
            .write ...
        - Notes:

    MkDir:
        - Groups: ...
        - Usage:
            .mkdir ...
        - Notes:

    RmDir:
        - Groups: ...
        - Usage:
            .rmdir ...
        - Notes:

    Rm:
        - Groups: ...
        - Usage:
            .rm ...
        - Notes:

    Mv:
        - Groups: ...
        - Usage:
            .mv ...
        - Notes:

    DirPath:
        - Groups: ...
        - Usage:
            .dirpath ...
        - Notes:

    FileName:
        - Groups: ...
        - Usage:
            .filename ...
        - Notes:

    BaseName:
        - Groups: ...
        - Usage:
            .basename ...
        - Notes:

    Extension:
        - Groups: ...
        - Usage:
            .extension ...
        - Notes:

    Abs:
        - Groups: ...
        - Usage:
            .abs ...
        - Notes:

    Round:
        - Groups: ...
        - Usage:
            .round ...
        - Notes:

    DivMod:
        - Groups: ...
        - Usage:
            .divmod ...
        - Notes:

    Pow:
        - Groups: ...
        - Usage:
            .pow ...
        - Notes:

    GetAttr:
        - Groups: ...
        - Usage:
            .getattr ...
        - Notes:

    SetAttr:
        - Groups: ...
        - Usage:
            .setattr ...
        - Notes:

    HasAttr:
        - Groups: ...
        - Usage:
            .hasattr ...
        - Notes:

    GetItem:
        - Groups: GetSet, Index.
        - Usage:
            .getitem INDEX... [--strict]
        - Notes:
            - If 1 INDEX, returns it.
            - If multiple, returns a tuple.

    SetItem:
        - Groups: ...
        - Usage:
            .setitem ...
        - Notes:

    HasItem:
        - Groups: ...
        - Usage:
            .hasitem ...
        - Notes:

    Para:
        - Groups: ...
        - Usage:
            .para ...
        - Notes:

    ConvertRecord:
        - Groups: ...
        - Usage:
            .convertrecord ...
        - Notes:
            - Record conversions among various file types.
            - Support: fixed-width, delimited, JSON/YAML.


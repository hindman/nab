--------
Usage overview
--------

INPUT | nab [OPTS] STEP... [-- PATH...]

Where:

    INPUT = input data via stdin (INPUT or PATHS + MARKER + INPUT)

    OPTS =
           --help
           --encoding IN OUT             (default: utf-8 for both)
           --step-mode short,long,name   (comma-delim; default: all)
           --paths PATH...
           --paths-stdin MARKER          (PATHS also via stdin until MARKER)

    STEP = --step NM SOPTS
           -s     NM SOPTS
           .NM       SOPTS


--------
Terminology
--------

Terminology:

    - Run: end-to-end execution of nab.
    - Phase: the major subsections of a run.
    - Step: user-supplied parts of the processing pipeline.

    - NS-seq: a non-string sequence (typically tuple or list).

Phase names:

    begin      | Step configures itself.
    discover   | File discovery.
    initialize | Initialization at the start of a file.
    process    | Process one value.
    finalize   | The end-of-file extension of the process-phase.
    end        | Emit final outputs.

--------
Support paths via several mechanisms
--------

    - ARGS
    - The --paths option
    - ARGS + --paths
    - STDIN (if paths-stdin defined)

    - Via a file: one path per line.
    - Via clipboard.
    - Via directory walk.
    - Via glob.

    - Or any combination.

    - Other:

        - sort-files option

        - File inclusion/exclusion:
            --[no]follow                  Follow symlinks.  Default is off.
            --type=X                      Include only X files, where X is a recognized filetype.

--------
Better help
--------

    - Add step option-help text.
    - Show step docs.
    - Show Step.DESC.
    - Support Step.GROUPS.

--------
NabRgx
--------

Perl:

    return $1 if /.../;

Python:

    rgx = re.compile(...)
    m = rgx.search(TXT)
    if m:
        return m.group(1)

NabRgx:

    - A wrapper around both the regex and the match object.

    rgx = NabRgx(...)
    return iff(rgx.search(TXT), rgx[1], None)

--------
Support BFS processing
--------

    - Use cases: wny time file-wide holistic knowledge (presumably collected by
      early steps and stored in self.context) is needed by subsequent steps.

    - A default line-processing program is DFS:
        - Input a LINE.
        - Run it through all STEPS.
        - Go to the next LINE.

    - What BFS would look like:
        - Process all LINEs through 1st STEP.
        - For non-None vals, process through 2nd STEP.
        - Etc.

    - Assumption: must hold all data in memory.

--------
Add Step.context
--------

    - A dict-with-attr-support that all steps can read/write.
    - Example use case: a Rectype step that determines record type (eg H or P)
      and sets self.context accordingly.

--------
Support parallel file processing
--------

    - Current model: process one FILE, LINE by LINE.

    - Parallel model: process N FILEs, LINE-TUPLE by LINE-TUPLE.

    - Use cases:
        - File comparison work.
        - MPC examples:
            column.cmp.pl
            column.merge.pl
            rectangularize.pl
            var.diff.pl

--------
Support .nabrc file
--------

Some options related to nabrc file:

    --nabrc [PATH]   Specify an ackrc file to use (or none if PATH not given).
    --create-nabrc   Outputs a default nabrc to standard output.

Format:
    - Probably YAML.

Behaviors of .nabrc:

    - Set global options. For example:

        step-mode: name
        paths-stdin: MARKER

    - Set Step options. For example:

        Strip:
            use-regex: true
        FlipFlop:
            inclusive: both

    - Step naming to define aliases or resolve naming conflicts:

        step-renames:
            String.Count: StringCount

        step-aliases:
            String.Count: SCount

--------
DataDict() helper class for positional data processing
--------

    - DataDict() helper class:
        - Takes a file path defining the var names and locations.
        - Either fixed-with (start, width) or delimited (column number).

    - Then expose that structure on self so Step code can use it.

    - Add support for that convenience to relevant Step classes.

    - See MPC scripts for use cases.

--------
Dryrun support
--------

Example use cases:

    - When writing to files.

        - Take an OUTPUT_DIR.

        - Write output files to that directory tree (creating any
          subdirectories, as needed).

    - When performing any file-system operations: rm, touch, etc.

--------
Steps
--------

Roadmap:

    Steps 1:
        - Write: Pr Wr
        - Strip: Chomp Strip LStrip RStrip
        - Split-Join: Split RSplit Join
        - Index: Index RIndex Slice
        - Affix: Nl Prefix Suffix
        - Select: Head Skip Limit
        - Aggregate: Sum Min Max ValCount
        - Convert: Str Bytes Int Float List Tuple Set Dict Bool
        - Search-Replace: Sub Replace Search FindAll

    Steps 2:
        - Index: Slice
        - Affix: Center Ljust Rjust LineMeta
        - Format: Format Upper Lower

    Steps 3:
        - Run: Run Eval
        - Sequence: Append Extend Insert SliceAssign Pop Remove Reverse Sort Count Len Zip
        - Get-Set: GetAttr SetAttr HasAttr GetItem SetItem HasItem

    Steps 4:
        - Dict: Keys Values Items Update
        - Path: DirPath FileName BaseName Extension
        - Math: Abs Round DivMod Pow

    Steps 5:
        - Select: Lines FlipFlop Grep
        - Select: Tail Uniq Sample

    Steps 6:
        - Json: JsonD JsonL
        - Group: Group Para
        - Aggregate: Wc Freq

    Steps 7:
        - FileOp: Touch Write MkDir RmDir Rm Mv Cp
        - Format: Wrap Fill Dedent

    Steps 8:
        - Index: Cols
        - Dict: Dive
        - FileConvert: ConvertRecord

Steps:

    Group          | Step
    ------------------------------
    Write          | .
    .              | Pr
    .              | Wr
    Strip          | .
    .              | Chomp
    .              | Strip
    .              | LStrip
    .              | RStrip
    Split-Join     | .
    .              | Split
    .              | RSplit
    .              | Join
    Index          | .
    .              | Index
    .              | RIndex
    .              | Slice
    .              | Cols
    Select         | .
    .              | Head
    .              | Tail
    .              | Lines
    .              | Skip
    .              | Limit
    .              | FlipFlop
    .              | Grep
    .              | Uniq
    .              | Sample
    Aggregate      | .
    .              | Sum
    .              | Min
    .              | Max
    .              | ValCount
    .              | Wc
    .              | Freq
    .              | Cross
    Convert        | .
    .              | Str
    .              | Bytes
    .              | Encode
    .              | Decode
    .              | Int
    .              | Float
    .              | List
    .              | Tuple
    .              | Set
    .              | Dict
    .              | Bool
    Search-Replace | .
    .              | Sub
    .              | Replace
    .              | Search
    .              | FindAll
    Run            | .
    .              | Run
    .              | Eval
    Json           | .
    .              | JsonD
    .              | JsonL
    Format         | .
    .              | Format
    .              | Upper
    .              | Lower
    .              | Wrap
    .              | Fill
    .              | Dedent
    Affix          | .
    .              | Nl
    .              | Prefix
    .              | Suffix
    .              | Center
    .              | Ljust
    .              | Rjust
    .              | LineMeta
    Sequence       | .
    .              | Append
    .              | Extend
    .              | Insert
    .              | SliceAssign
    .              | Pop
    .              | Remove
    .              | Reverse
    .              | Sort
    .              | Count
    .              | Len
    .              | Zip
    Dict           | .
    .              | Keys
    .              | Values
    .              | Items
    .              | Update
    .              | Dive
    FileOp         | .
    .              | Touch
    .              | Write
    .              | MkDir
    .              | RmDir
    .              | Rm
    .              | Mv
    .              | Cp
    Path           | .
    .              | DirPath
    .              | FileName
    .              | BaseName
    .              | Extension
    Math           | .
    .              | Abs
    .              | Round
    .              | DivMod
    .              | Pow
    Get-Set        | .
    .              | GetAttr
    .              | SetAttr
    .              | HasAttr
    .              | GetItem
    .              | SetItem
    .              | HasItem
    Group          | .
    .              | Group
    .              | Para
    FileConvert    | .
    .              | ConvertRecord
    Discover       | .
    .              | Walk
    .              | Glob
    .              | OpenInp
    .              | OpenOut
    .              | OpenErr

Step details:

    Pr:
        - Groups: Write.
        - Usage:
            .pr [--sep X] [--end X]
        - Notes: .
            - The --file option not needed (handled by discover phase).
            - The --flush seems not applicable.

    Wr:
        - Inherit from Pr and just change the default --end option.

    Chomp:
        - Groups: Strip.
        - Usage:
            .chomp

    Strip:
        - Groups: Strip.
        - Usage:
            .strip [X] [--use-rgx]
        - Notes:
            - Default: behave like str.strip().
            - Also support regex-based stripping.

    LStrip:
        - Notes: see Strip.

    RStrip:
        - Notes: see Strip.

    Split:
        - Groups: Split-Join.
        - Usage:
            .split [SEP] [--max-split N]
        - Notes:

    RSplit:
        - Notes: see Split.

    Join:
        - Groups: Split-Join.
        - Usage:
            .join [STR]
        - Notes:
            - Returns STR.join(ln.val)

    Index:
        - Notes: synonym for GetItem.

    RIndex:
        - Notes: drop; not needed.

    Range:
        - Notes: rename to Slice.

    Slice:
        - Groups: Index.
        - Usage:
            .slice STOP
            .slice START STOP
            .slice START STOP STEP
            .slice [--start X] [--stop Y] [--step Z]
        - Notes:
            - return ln.val[SLICE]

    Cols:
        - Groups: Index.
        - Usage:
            .cols ...
            .cols N
            .cols START:STOP
            .cols FIRST..LAST
            .cols FIRST,N
        - Notes:
            - Very similar to Lines, but without STEP.
            - The step takes 1+ arguments.
            - The supported argument types can be mixed and matched.
            - Emits an N-tuple, where N equals the number of arguments to the step.
            - Column numbering starts at 1.

    Head:
        - Groups: Select.
        - Usage:
            .head [N]
        - Notes:
            - A Head step means emit the first N vals seen by that step.
            - Does not mean: emit only vals from the first N lines of the file.
            - Use Lines for the latter use case.

    Tail:
        - Groups: Select.
        - Usage:
            .tail [N]
        - Notes:
            - Hold the last N vals in memory.
            - Emit them during finalize-phase, for the last file.

    Lines:
        - Groups: Select.
        - Usage:
            .lines N
            .lines START:STOP:STEP
            .lines FIRST..LAST
            .lines FIRST,N
        - Notes:
            - The step takes 1+ arguments.
            - The supported argument types can be mixed and matched.
            - Line numbering starts at 1.

    Skip:
        - Groups: Select.
        - Usage:
            .skip N
        - Notes:
            - Like Head: skips the first N vals its sees.

    Limit:
        - Groups: Select.
        - Usage:
            .limit N
        - Notes:
            - Emit no more than N vals.

    FlipFlop:
        - Groups: Select.
        - Usage:
            .flipflop START STOP [--line-numbers LN] [--inclusive IN]
        - Notes:
            - By default, START and STOP triggers are regex-based.
            - LN for line-number triggers: none (default), start, stop, both.
            - IN controls inclusivity: none, start (default), stop, both (Perl default).
            - Both triggers can fire on the same line.

    Grep:
        - Groups: Select.
        - Usage:
            .grep RGX... [OPTIONS]
        - Notes:
            - Takes 1+ regexes.
            - Emits vals satisfing the regexes-plus-options.
            - See grep/ack for conventional single-letter options.
            - Options:
                --all               Emit only if all REGEXS match (default: any).
                --invert-match      Emit vals that do NOT match.
                --ignore-case       Ignore case.
                --literal           Quote all metacharacters; PATTERN is literal.
                --word-regex        Force PATTERN to match only whole words.
                --line-regex        Force PATTERN to match only whole lines.
                --before-context N  Also emit N lines before the match.
                --after-context N   Same idea.
                --context N         Same idea.
                --lines N           Emit no more than N vals from each file.
                --max-count N       Emit no more than N vals overall.
                --positions         Emit (line, position).

    Uniq:
        - Groups: Select.
        - Usage:
            .uniq [--scope S] [--repeated] [--ignore-case] [--exact]
        - Notes:
            - By default, Uniq evaluates adjacent values in the stream and
              emits only one of any adjacent set of duplicates.
            - The --scope option (file or all) widens the uniqueness check
              to a whole file or the entire stream. This option requires
              holding a set of vals seen.
            - The --repeated option inverts the logic: emits a val only
              if it is a duplicate (and emit it only once).
            - The --exact option strengthens the logic: emit a val
              only if appeared exactly once.

    Sample:
        - Groups: Select.
        - Usage:
            .sample RATE [--mode MODE] [--seed N]
        - Notes:
            - RATE: float in the inclusive range 0..1.
            - MODE: systematic|random (default: systematic).
            - Seed:
                - systematic: first unit select (default: random start).
                - random: call random.seed(N) during begin-phase.

    Sum:
        - Groups: Aggregate.
        - Usage:
            .sum
        - Notes:
            - Prints TOTAL during end-phase.
            - Supports any data types that handles += operator.

    Min:
        - Groups: Aggregate.
        - Usage:
            .min ...
        - Notes:
            - Prints MIN during end-phase.
            - Supports any data types that handles > operator.

    Max:
        - Notes: see Min.

    ValCount:
        - Groups: Aggregate.
        - Usage:
            .valcount
        - Notes:
            - Counts the N of values it sees.
            - Prints N during end-phase.

    Wc:
        - Groups: Aggregate.
        - Usage:
            .wc
            .wc lines|words|chars|bytes...
            .wc [--lines] [--words] [--chars] [--bytes]
        - Notes:
            - Counts the vals it sees.
            - Prints totals during end-phase.
            - Default output (LINES, WORDS, CHARS, BYTES).
            - Or user can request specific tallies via options or args.

    Freq:
        - Groups: Aggregate.
        - Usage:
            .freq [--mode MODE] [--format FMT] [--sort SORT] [--weighted]
        - Notes:
            - Behavior:
                - Collect frequency distribution(s) from the vals it sees.
                - Prints during the end-phase.
            - Frequency modes:
                - MODE: regular|multi|cross (default: regular).
                - Regular: expects a single value; one distribution.
                - Multi: expects a tuple; a distribution per position in the sequence.
                - Cross: expects a tuple; one distribution, using the tuple as the key.
            - Weighted frequencies:
                - Expects a (VAL, WEIGHT) tuple.
                - VAL varies by MODE, as noted above.
                - WEIGHT: weight values, with a parallel structure to VAL.
            - Output control:
                - FMT: fmt|json|yaml|csv|table.
                - Defaults:
                    - FMT of '{key} : {n}' (for basic frequencies).
                    - FMT of 'table' (for crosstabs).
                - Give more thought to how user can control tabular formats.
                - Sorting:
                    - By keys or vals, by ascending or descending.
                    - SORT: kasc|kdesc|vasc|vdesc (default: kasc).

    Str:
        - Groups: Convert.
        - Usage:
            .str
        - Notes:
            - Returns str(ln.val).
            - Based on Python 3, where str means unicode-text and bytes means binary.

    Bytes:
        - Same form as Str.

    Encode:
        - Groups: Convert.
        - Usage:
            .encode ENCODING [--errors X]
        - Notes:
            - Returns ln.val.encode(ENCODING, errors = X)

    Decode:
        - Same form as Encode.

    Int:
        - Same form as Str.
        - Also supports a --base N option.

    Float:
        - Same form as Str.

    List:
        - Same form as Str.
        - Also suppose --wrap option: returns [ln.val].

    Tuple:
        - Same form/options as List.

    Set:
        - Same form/options as List.

    Dict:
        - Same form as Str.

    Bool:
        - Same form as Str.

    Sub:
        - Groups: Search-Replace.
        - Usage:
            .sub RGX REPL [--count N] [--re-opts REOPTS] [--function]
        - Notes:
            - Returns RGX.sub(REPL, ln.val, count = N)
            - If --function is set, REPL is treated as code.
            - REOPTS: delimited names such as DOTALL, MULTILINE, IGNORECASE.

    Replace:
        - Groups: Search-Replace.
        - Usage:
            .replace OLD NEW [--count N]
        - Notes:
            - Returns ln.val.replace(OLD, NEW, N)

    Search:
        - Groups: Search-Replace.
        - Usage:
            .search RGX [GROUP] [--re-opts REOPTS]
        - Notes:
            - Performs a regex search on ln.val.
            - Returns groups(GROUP) or groups().
            - Also see Sub.

    FindAll:
        - Groups: Search-Replace.
        - Usage:
            .findall RGX [--re-opts REOPTS]
        - Notes:
            - See Sub and Search.

    Run:
        - Groups: Run.
        - Usage:
            .run [CODE] [--indent N]
            .run [--PHASE CODE]... [--indent N]
        - Notes:
            - Support code for all phases other than begin.
            - The positional CODE is a syntactic alternative to --process CODE.
            - Confirm that we support indented input.
            - Confirm multiple Run steps can be used in the same execution.

    Eval:
        - Groups: Run.
        - Usage:
            .eval
        - Notes:
            - Returns eval(ln.val)

    JsonD:
        - Groups: Json.
        - Usage:
            .jsond [--indent N] [--cls CLASS_NAME] [--default FUNC_NAME]
        - Notes:
            - Returns json.dumps(ln.val)
            - Support flags: skipkeys, ensure_ascii, check_circular, allow_nan,
              separators, sort_keys.
            - Get CLASS_NAME and FUNC_NAME from the Step's own globals().

    JsonL:
        - Groups: Json.
        - Usage:
            .jsonl [--encoding E]
        - Notes:
            - Returns json.loads(ln.val)
            - Maybe support other json.loads() kwargs: see JsonD

    Format:
        - Groups: Format.
        - Usage:
            .format FMT
        - Notes:
            - Generally returns FMT.format(ln.val).
            - Uses the type of ln.val to determine the calling details:
                - NS-sequence: format(*ln.val)
                - Mapping: format(**ln.val)
                - 2-tuple of (NS-sequence, mapping): format(*ln.val[0], **ln.val[1])
                - Other: format(ln.val)

            - NS-sequence.

    Upper:
        - Groups: Format.
        - Usage:
            .upper
        - Notes:
            - Returns ln.val.upper().

    Lower:
        - Same as Upper.

    Wrap:
        - Groups: Format.
        - Usage:
            .wrap [WIDTH] [WRAPOPTS]
        - Notes:
            - Returns textwrap.wrap(ln.val, WIDTH, **WRAPOPTS)

    Fill:
        - Similar to Wrap.

    Dedent:
        - Similar to Wrap.

    Nl:
        - Groups: Affix.
        - Usage:
            .nl
        - Notes:
            - Returns ln.val if it already has a trailing newline.
            - Otherwise, returns ln.val + '\n'.

    Prefix:
        - Groups: Affix.
        - Usage:
            .prefix X
        - Notes:
            - Returns X + ln.val.

    Suffix:
        - Same as Prefix.

    Center:
        - Groups: Affix.
        - Usage:
            .center WIDTH [--fillchar C]
        - Notes:
            - returns ln.val.center(WIDTH, C)

    Ljust:
        - Same as Prefix.

    Rjust:
        - Same as Prefix.

    LineMeta:
        - Groups: Affix.
        - Usage:
            .linemeta [FMT]
        - Notes:
            - Returns ln.val prefixed in the grep/ack style.
            - Default: '{path}:{line_num}:{val}'
            - Custom FMT strings should use: path, line_num, overall_num, val.

    Append:
        - Groups: Sequence.
        - Usage:
            .append X [--convert TYPE]
        - Notes:
            - The --convert option supports basic types: int, float, bytes, bool.
            - Default TYPE: str.
            - Returns ln.val after performing ln.val.append(TYPE(X)).

    Extend:
        - Groups: Sequence.
        - Usage:
            .extend X... [--convert TYPE]
        - Notes:
            - Similar to Append.

    Insert:
        - Groups: Sequence.
        - Usage:
            .insert I X [--convert TYPE]
        - Notes:
            - Similar to Append.

    SliceAssign:
        - Groups: Sequence.
        - Usage:
            .insert START:STOP:STEP X... [--convert TYPE]
        - Notes:
            - Similar to Append.

    Pop:
        - Groups: Sequence.
        - Usage:
            .pop [I]
        - Notes:
            - Similar to Append.

    Remove:
        - Groups: Sequence.
        - Usage:
            .remove X [--convert TYPE]
        - Notes:
            - Similar to Append.

    Reverse:
        - Groups: Sequence.
        - Usage:
            .reverse
        - Notes:
            - Similar to Append.

    Sort:
        - Groups: Sequence.
        - Usage:
            .sort [--key CODE] [--reverse]
        - Notes:
            - Similar to Append.

    Count:
        - Groups: Sequence.
        - Usage:
            .count X [--convert TYPE]
        - Notes:
            - Returns ln.val.count(TYPE(X))

    Len:
        - Groups: Sequence.
        - Usage:
            .len
        - Notes:
            - Returns len(ln.val).

    Zip:
        - Groups: Sequence.
        - Usage:
            .zip
        - Notes:
            - Expects ln.val to be NS-sequence of iterables.
            - Returns zip(*ln.val).

    Keys:
        - Groups: Dict.
        - Usage:
            .keys
        - Notes:
            - Returns tuple(ln.val.keys()).

    Values:
        - Similar to Keys.

    Items:
        - Similar to Keys.

    Update:
        - Groups: Dict.
        - Usage:
            .update JSON
        - Notes:
            - Returns ln.val after calling ln.val.update(json.loads(JSON)).

    Dive:
        - Groups: Dict.
        - Usage:
            .dive PATH [OPTIONS]
        - Notes:
            - Uses PATH to perform dict-dive on ln.val.
            - Returns the val retrieved.
            - See Stork data_dive() for details on behaviors and OPTIONS.

    Touch:
        - Groups: FileOp.
        - Usage:
            .touch [--return R] [--ignore-failure]
        - Notes:
            - Touches the path defined by ln.val.
            - R options: val, status, val-status, none.
            - R default: val.
            - Status is a bool indicating whether the operation succeeded.
            - Raises on failure, unless --ignore-failure is set.

    Write:
        - Similar to Touch.
        - Expects (PATH, VAL) tuple.
        - Writes VAL to PATH.

    MkDir:
        - Similar to Touch.

    RmDir:
        - Similar to Touch.

    Rm:
        - Similar to Touch.
        - Also support -r behavior, either by default or via an option.

    Mv:
        - Similar to Touch.
        - Expects a NS-sequence:
            - (SOURCE, TARGET)
            - (S1, S2, ..., DIRECTORY)

    Cp:
        - Similar to Mv.

    DirPath:
        - Groups: Path.
        - Usage:
            .dirpath
        - Notes:
            - Returns os.path.dirname(ln.val).

    FileName:
        - Similar to DirPath.

    BaseName:
        - Similar to DirPath.

    Extension:
        - Similar to DirPath.

    Abs:
        - Groups: Math.
        - Usage:
            .abs
        - Notes:
            - Returns abs(ln.val).

    Round:
        - Groups: Math.
        - Usage:
            .round [N]
        - Notes:
            - Returns round(ln.val, N) if N is given.
            - Otherwise returns round(*ln.val).

    DivMod:
        - Similar to Round.

    Pow:
        - Similar to Round.
        - Usage: .pow [X Y [Z]]

    GetAttr:
        - Groups: Get-Set.
        - Usage:
            .getattr [NAME] [DEFAULT] [--convert TYPE]
        - Notes:
            - Returns getattr(ln.val, NAME, DEFAULT).
            - If NAME not supplied, assumes ln.val is a (VAL, NAME) NS-sequence.
            - See Append regarding --convert option, which is applied to DEFAULT.

    SetAttr:
        - Groups: Get-Set.
        - Usage:
            .setattr
            .setattr NAME
            .setattr NAME VALUE
        - Notes:
            - Returns ln.val after calling setattr().
            - Expected input for each usage pattern:
                .setattr             | (OBJ, NAME, VALUE)
                .setattr NAME        | (OBJ, VALUE)
                .setattr NAME VALUE  | OBJ

    HasAttr:
        - Similar to GetAttr.

    GetItem:
        - Groups: Get-Set.
        - Usage:
            .getitem K... [--strict]
        - Notes:
            - If given a single K, returns ln.val[K].
            - If multiple, returns a tuple.

    SetItem:
        - Similar to SetAttr.

    HasItem:
        - Similar to HasAttr.

    Group:
        - Groups: Group.
        - Usage:
            .group [RGX] [--inclusive none|next|previous|separate]
        - Notes:
            - Groups vals into bundles of data; emits each group.
            - By default, does not emit boundary values.
            - Inclusive options control the groups to while boundary vals are allocated:
                - none     : none; they are discarded (default).
                - next     : next group.
                - previous : previous group.
                - separate : a separate group.

    Para:
        - A specialized flavor of Group.
        - Boundary: empty line after stripping.

    ConvertRecord:
        - Groups: FileConv.
        - Usage:
            .convertrecord FROM TO [--delimiter X]
        - Notes:
            - Record conversions among various file types.
            - FROM/TO values: fixed|delimited|json|yaml|csv.
            - Figure out where data-dict for fixed will be specified.

    Walk:
        - Groups: Discover.
        - Usage:
            .walk ROOT... [--keep PATT] [--reject PATT]
        - Notes:
            - Assess the options that make sense.

    Glob:
        - Groups: Discover.
        - Usage:
            .glob PATTERN...
        - Notes:
            - Assess the options that make sense.

    OpenInp, OpenOut, OpenErr:
        - Groups: Discover.
        - Usage:
            .openinp [--mode M] [--buffering N] [--encoding EN] [--errors ER] [--newline NL] [--closefd]
            .openout ...
            .openerr ...
        - Notes:
            - Applies one or more settings to be used when opening files.

